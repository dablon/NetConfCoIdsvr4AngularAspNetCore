// <auto-generated />
using System;
using Event.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Event.API.Migrations
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Event.API.Domain.EventUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.HasKey("Id");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("Event.API.Domain.WorkShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsFree");

                    b.HasKey("Id");

                    b.ToTable("WorkShops");
                });

            modelBuilder.Entity("Event.API.Domain.WorkshopUser", b =>
                {
                    b.Property<Guid>("WorkshopId");

                    b.Property<Guid>("EventUserId");

                    b.HasKey("WorkshopId", "EventUserId");

                    b.HasIndex("EventUserId");

                    b.ToTable("WorkshopUser");
                });

            modelBuilder.Entity("Event.API.Domain.WorkshopUser", b =>
                {
                    b.HasOne("Event.API.Domain.EventUser", "EventUser")
                        .WithMany("WorkshopUsers")
                        .HasForeignKey("EventUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Event.API.Domain.WorkShop", "WorkShop")
                        .WithMany("WorkshopUsers")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
